
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 19 21:23:19 EST 2013
//----------------------------------------------------

package javacode;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import javacode.syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 19 21:23:19 EST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\004\012\000\002\005\003\000\002\005\002\000" +
    "\002\006\004\000\002\006\003\000\002\007\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\002\000\002\014\004\000\002\014\003\000" +
    "\002\013\022\000\002\013\021\000\002\012\003\000\002" +
    "\012\003\000\002\016\004\000\002\017\005\000\002\017" +
    "\003\000\002\015\003\000\002\015\002\000\002\021\003" +
    "\000\002\021\002\000\002\022\004\000\002\022\003\000" +
    "\002\020\005\000\002\020\011\000\002\020\007\000\002" +
    "\020\007\000\002\020\006\000\002\020\011\000\002\020" +
    "\011\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\006\000\002\024\005\000\002\024" +
    "\010\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\007\000\002\024\006\000\002" +
    "\024\004\000\002\024\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\003\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\uffff\006\007\001\002\000\004\002" +
    "\250\001\002\000\004\002\001\001\002\000\006\002\ufffd" +
    "\006\007\001\002\000\004\057\010\001\002\000\006\011" +
    "\012\033\011\001\002\000\016\005\016\014\020\020\ufff9" +
    "\023\023\034\ufff9\057\024\001\002\000\004\057\013\001" +
    "\002\000\004\033\014\001\002\000\016\005\016\014\020" +
    "\020\ufff9\023\023\034\ufff9\057\024\001\002\000\010\010" +
    "\ufffa\020\ufffa\034\ufffa\001\002\000\004\057\ufff4\001\002" +
    "\000\004\057\242\001\002\000\006\035\240\057\ufff3\001" +
    "\002\000\020\005\016\010\ufff7\014\020\020\ufff7\023\023" +
    "\034\ufff7\057\024\001\002\000\006\020\027\034\uffee\001" +
    "\002\000\006\035\025\057\ufff2\001\002\000\004\057\ufff0" +
    "\001\002\000\004\036\026\001\002\000\004\057\ufff1\001" +
    "\002\000\016\005\016\014\020\022\037\023\023\027\040" +
    "\057\024\001\002\000\004\034\uffef\001\002\000\006\020" +
    "\027\034\uffec\001\002\000\004\034\033\001\002\000\006" +
    "\002\ufffb\006\ufffb\001\002\000\004\034\uffed\001\002\000" +
    "\004\057\222\001\002\000\004\057\uffe8\001\002\000\014" +
    "\005\016\014\020\023\023\027\040\057\024\001\002\000" +
    "\004\057\uffe9\001\002\000\004\057\042\001\002\000\004" +
    "\031\043\001\002\000\014\005\016\014\020\023\023\032" +
    "\uffe3\057\024\001\002\000\004\032\uffe4\001\002\000\004" +
    "\057\221\001\002\000\006\032\uffe5\040\217\001\002\000" +
    "\004\032\050\001\002\000\004\033\051\001\002\000\004" +
    "\004\052\001\002\000\014\005\016\010\ufff9\014\020\023" +
    "\023\057\024\001\002\000\004\010\054\001\002\000\040" +
    "\012\072\013\074\016\073\017\057\021\uffe1\024\056\025" +
    "\066\026\060\030\067\031\062\033\055\041\075\057\064" +
    "\060\070\061\065\001\002\000\040\012\072\013\074\016" +
    "\073\017\057\024\056\025\066\026\060\030\067\031\062" +
    "\033\055\034\uffe1\041\075\057\064\060\070\061\065\001" +
    "\002\000\004\031\211\001\002\000\042\032\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\001\002\000\042\032\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\001" +
    "\002\000\004\021\205\001\002\000\026\012\072\016\073" +
    "\017\057\025\066\026\060\031\062\041\075\057\077\060" +
    "\070\061\065\001\002\000\032\035\102\042\104\043\114" +
    "\044\112\045\105\046\101\047\113\050\175\053\107\054" +
    "\103\055\110\056\111\001\002\000\034\035\164\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\165\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000\042" +
    "\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\001\002\000\042\032\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\001\002\000\004\031\160\001\002\000\042" +
    "\032\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\001\002\000\042\012\072\013" +
    "\074\016\073\017\057\021\uffdf\024\056\025\066\026\060" +
    "\030\067\031\062\033\055\034\uffdf\041\075\057\064\060" +
    "\070\061\065\001\002\000\042\032\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\006\014\150\057\151\001\002\000\004\031" +
    "\142\001\002\000\026\012\072\016\073\017\057\025\066" +
    "\026\060\031\062\041\075\057\077\060\070\061\065\001" +
    "\002\000\006\021\uffe2\034\uffe2\001\002\000\042\032\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\001\002\000\042\032\uffc1\035\102\036" +
    "\uffc1\037\uffc1\040\uffc1\042\104\043\114\044\112\045\105" +
    "\046\101\047\113\050\106\053\107\054\103\055\110\056" +
    "\111\001\002\000\026\012\072\016\073\017\057\025\066" +
    "\026\060\031\062\041\075\057\077\060\070\061\065\001" +
    "\002\000\026\012\072\016\073\017\057\025\066\026\060" +
    "\031\062\041\075\057\077\060\070\061\065\001\002\000" +
    "\026\012\072\016\073\017\057\025\066\026\060\031\062" +
    "\041\075\057\077\060\070\061\065\001\002\000\026\012" +
    "\072\016\073\017\057\025\066\026\060\031\062\041\075" +
    "\057\077\060\070\061\065\001\002\000\026\012\072\016" +
    "\073\017\057\025\066\026\060\031\062\041\075\057\077" +
    "\060\070\061\065\001\002\000\006\015\123\057\124\001" +
    "\002\000\026\012\072\016\073\017\057\025\066\026\060" +
    "\031\062\041\075\057\077\060\070\061\065\001\002\000" +
    "\026\012\072\016\073\017\057\025\066\026\060\031\062" +
    "\041\075\057\077\060\070\061\065\001\002\000\026\012" +
    "\072\016\073\017\057\025\066\026\060\031\062\041\075" +
    "\057\077\060\070\061\065\001\002\000\026\012\072\016" +
    "\073\017\057\025\066\026\060\031\062\041\075\057\077" +
    "\060\070\061\065\001\002\000\026\012\072\016\073\017" +
    "\057\025\066\026\060\031\062\041\075\057\077\060\070" +
    "\061\065\001\002\000\026\012\072\016\073\017\057\025" +
    "\066\026\060\031\062\041\075\057\077\060\070\061\065" +
    "\001\002\000\042\032\uffd4\035\102\036\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\044\112\045\105\046\uffd4\047\uffd4" +
    "\050\106\053\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\042\032\uffd2\035\102\036\uffd2\037\uffd2\040\uffd2\042\104" +
    "\043\114\044\112\045\105\046\uffd2\047\uffd2\050\106\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000\042\032\uffd7" +
    "\035\102\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\106\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\001\002\000\042\032\uffce\035\102\036" +
    "\uffce\037\uffce\040\uffce\042\104\043\114\044\112\045\105" +
    "\046\uffce\047\uffce\050\106\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\001\002\000\042\032\uffcf\035\102\036\uffcf\037\uffcf" +
    "\040\uffcf\042\104\043\114\044\112\045\105\046\uffcf\047" +
    "\uffcf\050\106\053\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\042\032\uffd1\035\102\036\uffd1\037\uffd1\040\uffd1\042" +
    "\104\043\114\044\112\045\105\046\uffd1\047\uffd1\050\106" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\042\032" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\001\002\000\004\031\125\001\002" +
    "\000\030\012\072\016\073\017\057\025\066\026\060\031" +
    "\062\032\uffbc\041\075\057\077\060\070\061\065\001\002" +
    "\000\036\032\uffbe\035\102\040\132\042\104\043\114\044" +
    "\112\045\105\046\101\047\113\050\106\053\107\054\103" +
    "\055\110\056\111\001\002\000\004\032\uffbd\001\002\000" +
    "\004\032\131\001\002\000\042\032\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\001\002\000\026\012\072\016\073\017\057\025\066\026" +
    "\060\031\062\041\075\057\077\060\070\061\065\001\002" +
    "\000\004\032\uffbf\001\002\000\042\032\uffd5\035\102\036" +
    "\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\106\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\042\032\uffd6\035\102\036\uffd6\037\uffd6" +
    "\040\uffd6\042\uffd6\043\uffd6\044\112\045\105\046\uffd6\047" +
    "\uffd6\050\106\053\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002" +
    "\000\042\032\uffd0\035\102\036\uffd0\037\uffd0\040\uffd0\042" +
    "\104\043\114\044\112\045\105\046\uffd0\047\uffd0\050\106" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\034\035" +
    "\102\036\140\042\104\043\114\044\112\045\105\046\101" +
    "\047\113\050\106\053\107\054\103\055\110\056\111\001" +
    "\002\000\042\032\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000\042" +
    "\032\uffd3\035\102\036\uffd3\037\uffd3\040\uffd3\042\104\043" +
    "\114\044\112\045\105\046\uffd3\047\uffd3\050\106\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\001\002\000\026\012\072\016" +
    "\073\017\057\025\066\026\060\031\062\041\075\057\077" +
    "\060\070\061\065\001\002\000\034\032\144\035\102\042" +
    "\104\043\114\044\112\045\105\046\101\047\113\050\106" +
    "\053\107\054\103\055\110\056\111\001\002\000\036\012" +
    "\072\013\074\016\073\017\057\024\056\025\066\026\060" +
    "\030\067\031\062\033\055\041\075\057\064\060\070\061" +
    "\065\001\002\000\004\007\146\001\002\000\036\012\072" +
    "\013\074\016\073\017\057\024\056\025\066\026\060\030" +
    "\067\031\062\033\055\041\075\057\064\060\070\061\065" +
    "\001\002\000\044\007\uffdd\012\uffdd\013\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\041\uffdd\057\uffdd\060\uffdd\061\uffdd\001" +
    "\002\000\004\035\154\001\002\000\004\031\152\001\002" +
    "\000\004\032\153\001\002\000\042\032\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\026\012\072\016\073\017\057\025\066" +
    "\026\060\031\062\041\075\057\077\060\070\061\065\001" +
    "\002\000\034\035\102\036\156\042\104\043\114\044\112" +
    "\045\105\046\101\047\113\050\106\053\107\054\103\055" +
    "\110\056\111\001\002\000\042\032\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\001\002\000\006\021\uffe0\034\uffe0\001\002\000\026\012" +
    "\072\016\073\017\057\025\066\026\060\031\062\041\075" +
    "\057\077\060\070\061\065\001\002\000\034\032\162\035" +
    "\102\042\104\043\114\044\112\045\105\046\101\047\113" +
    "\050\106\053\107\054\103\055\110\056\111\001\002\000" +
    "\036\012\072\013\074\016\073\017\057\024\056\025\066" +
    "\026\060\030\067\031\062\033\055\041\075\057\064\060" +
    "\070\061\065\001\002\000\044\007\uffdc\012\uffdc\013\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\041\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\001\002\000\026\012\072\016\073\017\057\025" +
    "\066\026\060\031\062\041\075\057\077\060\070\061\065" +
    "\001\002\000\026\012\072\016\073\017\057\025\066\026" +
    "\060\031\062\041\075\057\077\060\070\061\065\001\002" +
    "\000\034\035\102\037\167\042\104\043\114\044\112\045" +
    "\105\046\101\047\113\050\106\053\107\054\103\055\110" +
    "\056\111\001\002\000\044\007\uffda\012\uffda\013\uffda\016" +
    "\uffda\017\uffda\021\uffda\024\uffda\025\uffda\026\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\041\uffda\057\uffda\060\uffda\061" +
    "\uffda\001\002\000\034\035\102\036\171\042\104\043\114" +
    "\044\112\045\105\046\101\047\113\050\106\053\107\054" +
    "\103\055\110\056\111\001\002\000\004\051\172\001\002" +
    "\000\026\012\072\016\073\017\057\025\066\026\060\031" +
    "\062\041\075\057\077\060\070\061\065\001\002\000\034" +
    "\035\102\037\174\042\104\043\114\044\112\045\105\046" +
    "\101\047\113\050\106\053\107\054\103\055\110\056\111" +
    "\001\002\000\044\007\uffd9\012\uffd9\013\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\041\uffd9\057\uffd9\060\uffd9\061\uffd9\001" +
    "\002\000\006\015\123\057\176\001\002\000\004\031\177" +
    "\001\002\000\030\012\072\016\073\017\057\025\066\026" +
    "\060\031\062\032\uffbc\041\075\057\077\060\070\061\065" +
    "\001\002\000\004\032\201\001\002\000\034\035\uffcb\037" +
    "\202\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000" +
    "\044\007\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\021\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\041\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000\034" +
    "\032\204\035\102\042\104\043\114\044\112\045\105\046" +
    "\101\047\113\050\106\053\107\054\103\055\110\056\111" +
    "\001\002\000\042\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000" +
    "\026\012\072\016\073\017\057\025\066\026\060\031\062" +
    "\041\075\057\077\060\070\061\065\001\002\000\034\035" +
    "\102\037\207\042\104\043\114\044\112\045\105\046\101" +
    "\047\113\050\106\053\107\054\103\055\110\056\111\001" +
    "\002\000\004\034\210\001\002\000\006\020\uffeb\034\uffeb" +
    "\001\002\000\026\012\072\016\073\017\057\025\066\026" +
    "\060\031\062\041\075\057\077\060\070\061\065\001\002" +
    "\000\034\032\213\035\102\042\104\043\114\044\112\045" +
    "\105\046\101\047\113\050\106\053\107\054\103\055\110" +
    "\056\111\001\002\000\004\037\214\001\002\000\044\007" +
    "\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\021\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\041" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000\004\034\216" +
    "\001\002\000\044\007\uffde\012\uffde\013\uffde\016\uffde\017" +
    "\uffde\021\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde" +
    "\033\uffde\034\uffde\041\uffde\057\uffde\060\uffde\061\uffde\001" +
    "\002\000\012\005\016\014\020\023\023\057\024\001\002" +
    "\000\004\032\uffe6\001\002\000\006\032\uffe7\040\uffe7\001" +
    "\002\000\004\031\223\001\002\000\014\005\016\014\020" +
    "\023\023\032\uffe3\057\024\001\002\000\004\032\225\001" +
    "\002\000\004\033\226\001\002\000\004\004\227\001\002" +
    "\000\014\005\016\010\ufff9\014\020\023\023\057\024\001" +
    "\002\000\004\010\231\001\002\000\040\012\072\013\074" +
    "\016\073\017\057\021\uffe1\024\056\025\066\026\060\030" +
    "\067\031\062\033\055\041\075\057\064\060\070\061\065" +
    "\001\002\000\004\021\233\001\002\000\026\012\072\016" +
    "\073\017\057\025\066\026\060\031\062\041\075\057\077" +
    "\060\070\061\065\001\002\000\034\035\102\037\235\042" +
    "\104\043\114\044\112\045\105\046\101\047\113\050\106" +
    "\053\107\054\103\055\110\056\111\001\002\000\004\034" +
    "\236\001\002\000\006\020\uffea\034\uffea\001\002\000\010" +
    "\010\ufff8\020\ufff8\034\ufff8\001\002\000\004\036\241\001" +
    "\002\000\004\057\ufff5\001\002\000\004\037\243\001\002" +
    "\000\020\005\ufff6\010\ufff6\014\ufff6\020\ufff6\023\ufff6\034" +
    "\ufff6\057\ufff6\001\002\000\006\020\027\034\uffee\001\002" +
    "\000\004\034\246\001\002\000\006\002\ufffc\006\ufffc\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\246\004\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\243\006\014\007\020\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\021\006\014\007\020\010" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\236\007\020\010" +
    "\016\001\001\000\010\011\031\013\030\014\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\035\012\034\001\001\000\002" +
    "\001\001\000\006\013\030\014\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\035\012\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\044\015\046\016\045\017\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\052\006" +
    "\014\007\020\010\016\001\001\000\002\001\001\000\012" +
    "\020\070\021\060\022\075\024\062\001\001\000\012\020" +
    "\070\021\214\022\075\024\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\070\022\156\024\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\140\001\001\000\004\024" +
    "\136\001\001\000\004\024\135\001\001\000\004\024\134" +
    "\001\001\000\004\024\133\001\001\000\002\001\001\000" +
    "\004\024\121\001\001\000\004\024\120\001\001\000\004" +
    "\024\117\001\001\000\004\024\116\001\001\000\004\024" +
    "\115\001\001\000\004\024\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\125\025\126\026\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\125\025\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\142\001\001\000\002\001\001\000\006\020\144" +
    "\024\062\001\001\000\002\001\001\000\006\020\146\024" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\160\001\001\000\002\001\001\000" +
    "\006\020\162\024\062\001\001\000\002\001\001\000\004" +
    "\024\167\001\001\000\004\024\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\125" +
    "\025\126\026\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\044\016\045\017\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\044\015\223\016\045\017\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\227\006\014\007\020\010\016\001\001\000\002" +
    "\001\001\000\012\020\070\021\231\022\075\024\062\001" +
    "\001\000\002\001\001\000\004\024\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\244\013\030\014\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;
  mjc_ClassDeclList parsetreeRoot;
  Lexer lexer;
  boolean debug;

  public Parser(Lexer lex, boolean debug) 
  {
      super(lex);
      lexer = lex;
      this.debug = debug;
  }

  public void report_error(String message, Object info) 
  {
    syntaxErrors = true;    
    System.out.print(message);
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // KleeneExpList ::= 
            {
              mjc_ExpList RESULT =null;
		
    if (parser.debug)
        System.out.println("KleeneExpList -> Null");
    RESULT = new mjc_ExpList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneExpList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // KleeneExpList ::= ExpList 
            {
              mjc_ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_ExpList ex = (mjc_ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("KleeneExpList -> ExpList");
    RESULT = ex;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneExpList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpList ::= Exp 
            {
              mjc_ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp ex = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Single EXP");
    RESULT = new mjc_ExpList(ex);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpList ::= Exp COMMA_TOK ExpList 
            {
              mjc_ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp ex = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_ExpList el = (mjc_ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("ExpList -> Exp ExpList");
    el.insertElementAt(ex, 0);
    RESULT = el;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= LPAREN_TOK Exp RPAREN_TOK 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Exp -: (EXP)");
    RESULT = e1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= BANG_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> !EXP");
    RESULT = new mjc_Not(e1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp ::= NEW_TOK ID_TOK LPAREN_TOK RPAREN_TOK 
            {
              mjc_Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug)
        System.out.println("Exp -:> new ID[]");
    RESULT = new mjc_NewObject(new mjc_Identifier(id));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp ::= NEW_TOK INTTYPE_TOK LBRACKET_TOK Exp RBRACKET_TOK 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Exp -> new int[EXP]");
    RESULT = new mjc_NewArray(e1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp ::= THIS_TOK 
            {
              mjc_Exp RESULT =null;
		
    if (parser.debug)
        System.out.println("Exp -> this");
    RESULT = new mjc_This(new mjc_Identifier("myInstance"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp ::= ID_TOK 
            {
              mjc_Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> id");
    RESULT = new mjc_IdentifierExp(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp ::= NULL_TOK 
            {
              mjc_Exp RESULT =null;
		
    if (parser.debug)
        System.out.println("Exp -> null");
    RESULT = new mjc_Null();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp ::= FALSE_TOK 
            {
              mjc_Exp RESULT =null;
		 
    if (parser.debug)
        System.out.println("Exp -> false");
    RESULT = new mjc_False();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp ::= TRUE_TOK 
            {
              mjc_Exp RESULT =null;
		
    if (parser.debug)
        System.out.println("Exp -> true");
    RESULT = new mjc_True();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp ::= STRCONST_TOK 
            {
              mjc_Exp RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> $String constant");
    RESULT = new mjc_StringLiteral(sc);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp ::= INTCONST_TOK 
            {
              mjc_Exp RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ic = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (parser.debug)
        System.out.println("Exp -> #Integer constant");
    RESULT = new mjc_IntegerLiteral(ic);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp ::= Exp DOT_TOK ID_TOK LPAREN_TOK KleeneExpList RPAREN_TOK 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int klleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int klright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_ExpList kl = (mjc_ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp.(...)");
    RESULT = new mjc_CallExpression(e1, new mjc_Identifier(id), kl);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp ::= Exp DOT_TOK LENGTH_TOK 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug)
        System.out.println("Exp -> EXP.length");
    RESULT = new mjc_ArrayLength(e1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp ::= Exp LBRACKET_TOK Exp RBRACKET_TOK 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp[Exp]");
    RESULT = new mjc_ArrayLookup(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp ::= Exp LTEQ_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp <= Exp");
    RESULT = new mjc_LTEQ(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp ::= Exp GTEQ_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp >= Exp");
    RESULT = new mjc_GTEQ(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp ::= Exp NEQ_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp != Exp");
    RESULT = new mjc_NotEqual(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp ::= Exp EQ_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp == Exp");
    RESULT = new mjc_DoubleEqual(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= Exp LT_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp < Exp");
    RESULT = new mjc_LT(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= Exp GT_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp > Exp");
    RESULT = new mjc_GT(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= Exp MINUS_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp - Exp");
    RESULT = new mjc_Sub(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= Exp DIV_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp / Exp");
    RESULT = new mjc_Div(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp PLUS_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp + Exp");
    RESULT = new mjc_Add(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MUL_TOK Exp 
            {
              mjc_Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Exp -> Exp * Exp");
    RESULT = new mjc_Mult(e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Exp DOT_TOK ID_TOK LPAREN_TOK KleeneExpList RPAREN_TOK SEMICOLON_TOK 
            {
              mjc_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_ExpList el = (mjc_ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug)
        System.out.println("Statement -> Exp.func(EXPList);");
    RESULT = new mjc_CallStatement(e, new mjc_Identifier(id), el);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= ID_TOK LBRACKET_TOK Exp RBRACKET_TOK ASSIGN_TOK Exp SEMICOLON_TOK 
            {
              mjc_Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		mjc_Exp e1 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Exp e2 = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Statement -> id[EXP] = EXP;");
    RESULT = new mjc_ArrayAssign(new mjc_Identifier(id), e1, e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= ID_TOK ASSIGN_TOK Exp SEMICOLON_TOK 
            {
              mjc_Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Statement -> id = EXP;");
    RESULT = new mjc_Assign(new mjc_Identifier(id), e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= PRINT_TOK LPAREN_TOK Exp RPAREN_TOK SEMICOLON_TOK 
            {
              mjc_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug)
        System.out.println("Statement -> System.out.println(EXP);");
    RESULT = new mjc_Print(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= WHILE_TOK LPAREN_TOK Exp RPAREN_TOK Statement 
            {
              mjc_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Statement s1 = (mjc_Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Statement -> While (...) Statement");
    RESULT = new mjc_While(e, s1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IF_TOK LPAREN_TOK Exp RPAREN_TOK Statement ELSE_TOK Statement 
            {
              mjc_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Statement s1 = (mjc_Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Statement s2 = (mjc_Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Statement -> IF / ELSE");
    RESULT = new mjc_If(e, s1, s2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= LBRACE_TOK KleeneStatement RBRACE_TOK 
            {
              mjc_Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_StatementList s = (mjc_StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (parser.debug)
        System.out.println("Statement -> { KleeneStatement* }");
    RESULT = new mjc_Block(s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StatementList ::= Statement 
            {
              mjc_StatementList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Statement st = (mjc_Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("StatementList -> Statement");
    RESULT = new mjc_StatementList(st);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatementList ::= Statement StatementList 
            {
              mjc_StatementList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Statement st = (mjc_Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_StatementList sl = (mjc_StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("StatementList -> Statement StatementList");
    sl.insertElementAt(st, 0);
    RESULT = sl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // KleeneStatement ::= 
            {
              mjc_StatementList RESULT =null;
		
    if (parser.debug)
        System.out.println("KleeneStatement -> Null");
    RESULT = new mjc_StatementList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // KleeneStatement ::= StatementList 
            {
              mjc_StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_StatementList sl = (mjc_StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("KleeneStatement -> StatementList");
    RESULT = sl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // KleeneFormalList ::= 
            {
              mjc_FormalList RESULT =null;
		
    if (parser.debug)
        System.out.println("KleeneFormalList -> Null");
    RESULT = new mjc_FormalList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneFormalList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // KleeneFormalList ::= FormalList 
            {
              mjc_FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_FormalList fl = (mjc_FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("KleeneFormalList -> FormalList");
    RESULT = fl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneFormalList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormalList ::= Formal 
            {
              mjc_FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Formal f = (mjc_Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("FormalList -> Single param");
    RESULT = new mjc_FormalList(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormalList ::= Formal COMMA_TOK FormalList 
            {
              mjc_FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Formal f = (mjc_Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_FormalList fl = (mjc_FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("FormalList -> Param");
    fl.insertElementAt(f, 0);
    RESULT = fl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formal ::= Type ID_TOK 
            {
              mjc_Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_Type t = (mjc_Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("Formal -> Type Id");
    RESULT = new mjc_Formal(t, new mjc_Identifier(id));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodType ::= Type 
            {
              mjc_MethodType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_Type t = (mjc_Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("MethodType -> MethodReturnType");
    RESULT = new mjc_MethodReturnType(t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodType ::= VOID_TOK 
            {
              mjc_MethodType RESULT =null;
		
    if (parser.debug) 
        System.out.println("MethodType -> void");
    RESULT = new mjc_MethodVoidType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDecl ::= PUBLIC_TOK MethodType ID_TOK LPAREN_TOK KleeneFormalList RPAREN_TOK LBRACE_TOK BEGINVARS_TOK KleeneVarDeclList ENDVARS_TOK KleeneStatement RETURN_TOK Exp SEMICOLON_TOK RBRACE_TOK 
            {
              mjc_MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		mjc_MethodType type = (mjc_MethodType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		mjc_FormalList list = (mjc_FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		mjc_VarDeclList vdl = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int kstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int kstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		mjc_StatementList kst = (mjc_StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug)
        System.out.println("MethodDecl -> MethodDeclSimple");
    RESULT = new mjc_MethodDeclSimple(type, new mjc_Identifier(id), list, vdl, kst, e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDecl ::= PUBLIC_TOK STATIC_TOK MethodType ID_TOK LPAREN_TOK KleeneFormalList RPAREN_TOK LBRACE_TOK BEGINVARS_TOK KleeneVarDeclList ENDVARS_TOK KleeneStatement RETURN_TOK Exp SEMICOLON_TOK RBRACE_TOK 
            {
              mjc_MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		mjc_MethodType type = (mjc_MethodType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		mjc_FormalList list = (mjc_FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		mjc_VarDeclList vdl = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int kstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int kstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		mjc_StatementList kst = (mjc_StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Exp e = (mjc_Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (parser.debug) 
        System.out.println("MethodDecl -> MethodDeclStatic");
    RESULT = new mjc_MethodDeclStatic(type, new mjc_Identifier(id), list, vdl, kst, e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclList ::= MethodDecl 
            {
              mjc_MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_MethodDecl md = (mjc_MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("MethodDeclList -> MethodDecl");
    RESULT = new mjc_MethodDeclList(md);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              mjc_MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_MethodDecl md = (mjc_MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_MethodDeclList mdl = (mjc_MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("MethodDeclList -> MethodDecl MethodDeclList");
    mdl.insertElementAt(md, 0);
    RESULT = mdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // KleeneMethodDeclList ::= 
            {
              mjc_MethodDeclList RESULT =null;
		
    if (parser.debug)
        System.out.println("KleeneMethodDeclList -> Null");
    RESULT = new mjc_MethodDeclList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneMethodDeclList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // KleeneMethodDeclList ::= MethodDeclList 
            {
              mjc_MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_MethodDeclList md = (mjc_MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("KleeneMethodDeclList -> MethodDeclList");
    RESULT = md;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneMethodDeclList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= ID_TOK 
            {
              mjc_Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("Type -> IdentifierType");
    RESULT = new mjc_IdentifierType(i);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING_TOK LBRACKET_TOK RBRACKET_TOK 
            {
              mjc_Type RESULT =null;
		
    if (parser.debug) 
        System.out.println("Type -> String[]");
    RESULT = new mjc_StringArrayType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING_TOK 
            {
              mjc_Type RESULT =null;
		
    if (parser.debug) 
        System.out.println("Type -> String");
    RESULT = new mjc_StringType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INTTYPE_TOK 
            {
              mjc_Type RESULT =null;
		 
    if (parser.debug) 
        System.out.println("Type -> Int");
    RESULT = new mjc_IntegerType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= BOOLTYPE_TOK 
            {
              mjc_Type RESULT =null;
		
    if (parser.debug) 
        System.out.println("Type -> Boolean");
    RESULT = new mjc_BooleanType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INTTYPE_TOK LBRACKET_TOK RBRACKET_TOK 
            {
              mjc_Type RESULT =null;
		 
    if (parser.debug) 
        System.out.println("Type -> Int[]");
    RESULT = new mjc_IntArrayType();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type ID_TOK SEMICOLON_TOK 
            {
              mjc_VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_Type t = (mjc_Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    if (parser.debug) 
        System.out.println("VarDecl -> Type ID;");
    RESULT = new mjc_VarDecl(t, new mjc_Identifier(i));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclList ::= VarDecl 
            {
              mjc_VarDeclList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_VarDecl vd = (mjc_VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("VarDeclList -> VarDecl");
    RESULT = new mjc_VarDeclList(vd);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= VarDecl VarDeclList 
            {
              mjc_VarDeclList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_VarDecl vd = (mjc_VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_VarDeclList vdl = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug) 
        System.out.println("VarDeclList -> VarDecl VarDeclList");
    vdl.insertElementAt(vd, 0);
    RESULT = vdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // KleeneVarDeclList ::= 
            {
              mjc_VarDeclList RESULT =null;
		
    if (parser.debug)
        System.out.println("KleeneVarDeclList -> null");
    RESULT = new mjc_VarDeclList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneVarDeclList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // KleeneVarDeclList ::= VarDeclList 
            {
              mjc_VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_VarDeclList vdl = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (parser.debug)
        System.out.println("KleeneVarDeclList -> VarDeclList");
    RESULT = vdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KleeneVarDeclList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= CLASS_TOK ID_TOK EXTENDS_TOK ID_TOK LBRACE_TOK KleeneVarDeclList KleeneMethodDeclList RBRACE_TOK 
            {
              mjc_ClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_VarDeclList vd = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_MethodDeclList mdl = (mjc_MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    if (parser.debug) 
        System.out.println("ClassDecl -> class id extends id  "); 
    if (parser.debug) 
        System.out.println("ident="+c+" ident="+p);
    RESULT = new mjc_ClassDeclExtends(new mjc_Identifier(c),new mjc_Identifier(p),vd,mdl);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= CLASS_TOK ID_TOK LBRACE_TOK KleeneVarDeclList KleeneMethodDeclList RBRACE_TOK 
            {
              mjc_ClassDecl RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		mjc_VarDeclList vd = (mjc_VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_MethodDeclList mdl = (mjc_MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    if (parser.debug) 
        System.out.println("ClassDecl -> class id "); 
    if (parser.debug) 
        System.out.println("ident="+it);
    RESULT = new mjc_ClassDeclSimple(new mjc_Identifier(it), vd, mdl);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclList ::= ClassDecl 
            {
              mjc_ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_ClassDecl cd = (mjc_ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (parser.debug) 
        System.out.println("ClassDeclList -> ClassDecl"); 
    RESULT = new mjc_ClassDeclList(cd);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              mjc_ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_ClassDecl cd = (mjc_ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_ClassDeclList cdl = (mjc_ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (parser.debug) 
        System.out.println("ClassDeclList -> ClassDecl ClassDeclList");
    cdl.insertElementAt(cd, 0);
    RESULT = cdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              mjc_ClassDeclList RESULT =null;
		
    if (parser.debug) 
        System.out.println("Program -> NULL");
    parser.parsetreeRoot = new mjc_ClassDeclList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		mjc_ClassDeclList start_val = (mjc_ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ClassDeclList 
            {
              mjc_ClassDeclList RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		mjc_ClassDeclList cdl = (mjc_ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (parser.debug) 
        System.out.println("Program -> ClassDeclList"); 
    parser.parsetreeRoot = cdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

