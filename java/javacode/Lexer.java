/* The following code was generated by JFlex 1.4_pre3 on 11/18/13 12:08 PM */

package javacode;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 11/18/13 12:08 PM from the specification file
 * <tt>file:/home/michael/workspace/MiniJyava/flex/Scanner.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2,  0,  3,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 42,  5,  0,  6,  0, 48,  0, 34, 35,  9, 43, 41, 44, 33,  8, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0, 40, 46, 47, 45,  0, 
     0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6, 30,  6,  6,  6,  6,  6,  6,  6, 38,  0, 39,  0,  6, 
     0, 16, 10, 21, 22, 11, 25, 12, 26, 13,  6,  6, 20, 32, 14, 19, 
    29,  6, 17, 18, 24, 28, 15, 27, 23, 31,  6, 36,  0, 37,  0,  7
  };


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157\0\u0188\0\u01b9"+
    "\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126"+
    "\0\u0405\0\u0126\0\u0126\0\u0436\0\u0467\0\u0498\0\u04c9\0\223\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\304\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u04fa\0\u0126\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\304\0\304\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\304\0\u0d97\0\304\0\304\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\304\0\304\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\304\0\304\0\304\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\304\0\304\0\304\0\304\0\304"+
    "\0\u122f\0\u1260\0\304\0\304\0\304\0\u1291\0\u12c2\0\u12f3\0\304\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u0126";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[298];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 298) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\0\3\2\1\3\1\4\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\5\1\15"+
    "\1\16\1\5\1\17\1\20\2\5\1\21\1\22\1\5"+
    "\1\23\1\5\1\24\1\25\2\5\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\3\2\61\0"+
    "\1\3\54\0\2\4\1\0\2\4\1\46\53\4\4\0"+
    "\1\5\1\0\2\5\2\0\27\5\30\0\1\47\1\50"+
    "\134\0\1\5\1\0\2\5\2\0\1\5\1\51\7\5"+
    "\1\52\15\5\24\0\1\5\1\0\2\5\2\0\4\5"+
    "\1\53\5\5\1\54\2\5\1\55\11\5\24\0\1\5"+
    "\1\0\2\5\2\0\4\5\1\56\12\5\1\57\7\5"+
    "\24\0\1\5\1\0\2\5\2\0\1\5\1\60\20\5"+
    "\1\61\4\5\24\0\1\5\1\0\2\5\2\0\11\5"+
    "\1\62\15\5\24\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\63\25\5\24\0\1\5\1\0\2\5\2\0\16\5"+
    "\1\64\10\5\24\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\65\25\5\24\0\1\5\1\0\2\5\2\0\12\5"+
    "\1\66\14\5\24\0\1\5\1\0\2\5\2\0\7\5"+
    "\1\67\10\5\1\70\6\5\24\0\1\5\1\0\2\5"+
    "\2\0\6\5\1\71\20\5\24\0\1\5\1\0\2\5"+
    "\2\0\20\5\1\72\6\5\24\0\1\5\1\0\2\5"+
    "\2\0\22\5\1\73\4\5\24\0\1\5\1\0\2\5"+
    "\2\0\16\5\1\74\6\5\1\75\1\5\77\0\1\76"+
    "\60\0\1\77\60\0\1\100\60\0\1\101\61\0\1\102"+
    "\1\47\1\103\1\104\56\47\11\105\1\0\47\105\4\0"+
    "\1\5\1\0\2\5\2\0\2\5\1\106\24\5\24\0"+
    "\1\5\1\0\2\5\2\0\11\5\1\107\15\5\24\0"+
    "\1\5\1\0\2\5\2\0\14\5\1\110\12\5\24\0"+
    "\1\5\1\0\2\5\2\0\10\5\1\111\16\5\24\0"+
    "\1\5\1\0\2\5\2\0\16\5\1\112\10\5\24\0"+
    "\1\5\1\0\2\5\2\0\16\5\1\113\10\5\24\0"+
    "\1\5\1\0\2\5\2\0\21\5\1\114\5\5\24\0"+
    "\1\5\1\0\2\5\2\0\12\5\1\115\14\5\24\0"+
    "\1\5\1\0\2\5\2\0\3\5\1\116\23\5\24\0"+
    "\1\5\1\0\2\5\2\0\16\5\1\117\10\5\24\0"+
    "\1\5\1\0\2\5\2\0\6\5\1\120\20\5\24\0"+
    "\1\5\1\0\2\5\2\0\4\5\1\121\22\5\24\0"+
    "\1\5\1\0\2\5\2\0\6\5\1\122\20\5\24\0"+
    "\1\5\1\0\2\5\2\0\22\5\1\123\4\5\24\0"+
    "\1\5\1\0\2\5\2\0\3\5\1\124\23\5\24\0"+
    "\1\5\1\0\2\5\2\0\12\5\1\125\14\5\24\0"+
    "\1\5\1\0\2\5\2\0\3\5\1\126\23\5\24\0"+
    "\1\5\1\0\2\5\2\0\1\127\26\5\24\0\1\5"+
    "\1\0\2\5\2\0\7\5\1\130\17\5\24\0\1\5"+
    "\1\0\2\5\2\0\10\5\1\131\16\5\20\0\11\105"+
    "\1\132\47\105\4\0\1\5\1\0\2\5\2\0\3\5"+
    "\1\133\23\5\24\0\1\5\1\0\2\5\2\0\12\5"+
    "\1\134\14\5\24\0\1\5\1\0\2\5\2\0\5\5"+
    "\1\135\21\5\24\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\136\25\5\24\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\137\25\5\24\0\1\5\1\0\2\5\2\0\12\5"+
    "\1\140\14\5\24\0\1\5\1\0\2\5\2\0\14\5"+
    "\1\141\12\5\24\0\1\5\1\0\2\5\2\0\22\5"+
    "\1\142\4\5\24\0\1\5\1\0\2\5\2\0\16\5"+
    "\1\143\10\5\24\0\1\5\1\0\2\5\2\0\2\5"+
    "\1\144\24\5\24\0\1\5\1\0\2\5\2\0\10\5"+
    "\1\145\16\5\24\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\146\25\5\24\0\1\5\1\0\2\5\2\0\10\5"+
    "\1\147\16\5\24\0\1\5\1\0\2\5\2\0\10\5"+
    "\1\150\16\5\24\0\1\5\1\0\2\5\2\0\12\5"+
    "\1\151\14\5\24\0\1\5\1\0\2\5\2\0\12\5"+
    "\1\152\14\5\24\0\1\5\1\0\2\5\2\0\3\5"+
    "\1\153\23\5\24\0\1\5\1\0\2\5\2\0\16\5"+
    "\1\154\10\5\20\0\10\105\1\104\1\132\47\105\4\0"+
    "\1\5\1\0\2\5\2\0\4\5\1\155\22\5\24\0"+
    "\1\5\1\0\2\5\2\0\1\5\1\156\25\5\24\0"+
    "\1\5\1\0\2\5\2\0\6\5\1\157\20\5\24\0"+
    "\1\5\1\0\2\5\2\0\4\5\1\160\22\5\24\0"+
    "\1\5\1\0\2\5\2\0\7\5\1\161\17\5\24\0"+
    "\1\5\1\0\2\5\2\0\3\5\1\162\23\5\24\0"+
    "\1\5\1\0\2\5\2\0\16\5\1\163\10\5\24\0"+
    "\1\5\1\0\2\5\2\0\10\5\1\164\16\5\24\0"+
    "\1\5\1\0\2\5\2\0\1\5\1\165\25\5\24\0"+
    "\1\5\1\0\2\5\2\0\1\5\1\166\25\5\24\0"+
    "\1\5\1\0\2\5\2\0\3\5\1\167\23\5\24\0"+
    "\1\5\1\0\2\5\2\0\4\5\1\170\22\5\24\0"+
    "\1\5\1\0\2\5\2\0\1\5\1\171\25\5\24\0"+
    "\1\5\1\0\2\5\2\0\5\5\1\172\21\5\24\0"+
    "\1\5\1\0\2\5\2\0\6\5\1\173\20\5\24\0"+
    "\1\5\1\0\2\5\2\0\7\5\1\174\17\5\24\0"+
    "\1\5\1\0\2\5\2\0\14\5\1\175\12\5\24\0"+
    "\1\5\1\0\2\5\2\0\4\5\1\176\22\5\24\0"+
    "\1\5\1\0\2\5\2\0\13\5\1\177\13\5\24\0"+
    "\1\5\1\0\2\5\2\0\20\5\1\200\6\5\24\0"+
    "\1\5\1\0\2\5\2\0\13\5\1\201\13\5\24\0"+
    "\1\5\1\0\2\5\2\0\2\5\1\202\24\5\24\0"+
    "\1\5\1\0\2\5\2\0\26\5\1\203\24\0\1\5"+
    "\1\0\2\5\2\0\6\5\1\204\20\5\24\0\1\5"+
    "\1\0\2\5\2\0\4\5\1\205\22\5\24\0\1\5"+
    "\1\0\2\5\2\0\10\5\1\206\16\5\24\0\1\5"+
    "\1\0\2\5\2\0\10\5\1\207\16\5\24\0\1\5"+
    "\1\0\2\5\2\0\27\5\1\210\23\0\1\5\1\0"+
    "\2\5\2\0\7\5\1\211\17\5\43\0\1\212\41\0"+
    "\1\5\1\0\2\5\2\0\10\5\1\213\16\5\54\0"+
    "\1\214\54\0\1\215\71\0\1\216\54\0\1\217\44\0"+
    "\1\220\54\0\1\221\61\0\1\222\72\0\1\223\54\0"+
    "\1\224\52\0\1\225\42\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     0,  1,  1,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9, 
     9,  1,  1,  1,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9, 
     9,  9,  1,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    private static int num_nested_comments = 0;
    private Symbol symbol(int sym) 
    {
        return new Symbol(sym, yyline+1, yycolumn+1);
    }
 
    private Symbol symbol(int sym, Object val) 
    {
        return new Symbol(sym, yyline+1, yycolumn+1, val);
    }
 
    private void error(String message) 
    {
        System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5341];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 74: 
          { return symbol(INTTYPE_TOK);  }
        case 150: break;
        case 138: 
          { return symbol(BEGINVARS_TOK);  }
        case 151: break;
        case 134: 
          { return symbol(EXTENDS_TOK);  }
        case 152: break;
        case 133: 
          { return symbol(ENDVARS_TOK);  }
        case 153: break;
        case 28: 
          { return symbol(SEMICOLON_TOK);  }
        case 154: break;
        case 132: 
          { return symbol(BOOLTYPE_TOK);  }
        case 155: break;
        case 1: 
          {   }
        case 156: break;
        case 66: 
        case 67: 
          {   }
        case 157: break;
        case 2: 
          { return symbol(INTCONST_TOK, new Integer(yytext()));  }
        case 158: break;
        case 148: 
          { return symbol(PRINT_TOK);  }
        case 159: break;
        case 129: 
          { return symbol(STRING_TOK);  }
        case 160: break;
        case 128: 
          { return symbol(PUBLIC_TOK);  }
        case 161: break;
        case 127: 
          { return symbol(LENGTH_TOK);  }
        case 162: break;
        case 126: 
          { return symbol(STATIC_TOK);  }
        case 163: break;
        case 125: 
          { return symbol(RETURN_TOK);  }
        case 164: break;
        case 117: 
          { return symbol(WHILE_TOK);  }
        case 165: break;
        case 116: 
          { return symbol(FALSE_TOK);  }
        case 166: break;
        case 115: 
          { return symbol(CLASS_TOK);  }
        case 167: break;
        case 32: 
          { return symbol(MINUS_TOK);  }
        case 168: break;
        case 29: 
          { return symbol(COMMA_TOK);  }
        case 169: break;
        case 25: 
          { return symbol(RBRACE_TOK);  }
        case 170: break;
        case 24: 
          { return symbol(LBRACE_TOK);  }
        case 171: break;
        case 22: 
          { return symbol(LPAREN_TOK);  }
        case 172: break;
        case 23: 
          { return symbol(RPAREN_TOK);  }
        case 173: break;
        case 35: 
          { return symbol(ASSIGN_TOK);  }
        case 174: break;
        case 33: 
          { return symbol(GT_TOK);  }
        case 175: break;
        case 34: 
          { return symbol(LT_TOK);  }
        case 176: break;
        case 46: 
          { return symbol(IF_TOK);  }
        case 177: break;
        case 64: 
          { return symbol(EQ_TOK);  }
        case 178: break;
        case 31: 
          { return symbol(PLUS_TOK);  }
        case 179: break;
        case 30: 
          { return symbol(BANG_TOK);  }
        case 180: break;
        case 5: 
          { return symbol(DIV_TOK);  }
        case 181: break;
        case 6: 
          { return symbol(MUL_TOK);  }
        case 182: break;
        case 21: 
          { return symbol(DOT_TOK);  }
        case 183: break;
        case 61: 
          { return symbol(NEQ_TOK);  }
        case 184: break;
        case 62: 
          { return symbol(GTEQ_TOK);  }
        case 185: break;
        case 63: 
          { return symbol(LTEQ_TOK);  }
        case 186: break;
        case 65: 
          { return symbol(AND_TOK);  }
        case 187: break;
        case 75: 
          { return symbol(NEW_TOK);  }
        case 188: break;
        case 93: 
          { return symbol(ELSE_TOK);  }
        case 189: break;
        case 95: 
          { return symbol(NULL_TOK);  }
        case 190: break;
        case 96: 
          { return symbol(VOID_TOK);  }
        case 191: break;
        case 101: 
          { return symbol(TRUE_TOK);  }
        case 192: break;
        case 102: 
          { return symbol(THIS_TOK);  }
        case 193: break;
        case 4: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 90: 
        case 91: 
        case 92: 
        case 94: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 130: 
        case 131: 
        case 136: 
          { return symbol(ID_TOK, yytext());  }
        case 194: break;
        case 27: 
          { return symbol(RBRACKET_TOK);  }
        case 195: break;
        case 37: 
          { return symbol(STRCONST_TOK, yytext());  }
        case 196: break;
        case 26: 
          { return symbol(LBRACKET_TOK);  }
        case 197: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
